// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { SignUpApiV1UsersSignUpPostData, SignUpApiV1UsersSignUpPostResponse, SignInApiV1UsersSignInPostData, SignInApiV1UsersSignInPostResponse, GetMeApiV1UsersMeGetResponse, GetDashboardApiV1DashboardGetData, GetDashboardApiV1DashboardGetResponse, CreateProjectApiV1DashboardCreatePostData, CreateProjectApiV1DashboardCreatePostResponse, ModifyProjectApiV1DashboardModifyPutData, ModifyProjectApiV1DashboardModifyPutResponse, DeleteProjectApiV1DashboardDeleteDeleteData, DeleteProjectApiV1DashboardDeleteDeleteResponse, UploadFileApiV1DashboardUploadFilePostData, UploadFileApiV1DashboardUploadFilePostResponse, DownloadFileApiV1DashboardDownloadFileGetData, DownloadFileApiV1DashboardDownloadFileGetResponse, DeleteFileApiV1DashboardDeleteFileDeleteData, DeleteFileApiV1DashboardDeleteFileDeleteResponse } from './types.gen';

export class DefaultService {
    /**
     * Sign Up
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserDTO Successful Response
     * @throws ApiError
     */
    public static signUpApiV1UsersSignUpPost(data: SignUpApiV1UsersSignUpPostData): CancelablePromise<SignUpApiV1UsersSignUpPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/sign_up',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Sign In
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static signInApiV1UsersSignInPost(data: SignInApiV1UsersSignInPostData): CancelablePromise<SignInApiV1UsersSignInPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/sign_in',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Me
     * @returns UserDTO Successful Response
     * @throws ApiError
     */
    public static getMeApiV1UsersMeGet(): CancelablePromise<GetMeApiV1UsersMeGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Get Dashboard
     * @param data The data for the request.
     * @param data.category
     * @param data.priority
     * @param data.query
     * @param data.dateFilter
     * @param data.offset
     * @param data.limit
     * @returns GetDashboardResponse Successful Response
     * @throws ApiError
     */
    public static getDashboardApiV1DashboardGet(data: GetDashboardApiV1DashboardGetData = {}): CancelablePromise<GetDashboardApiV1DashboardGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dashboard',
            query: {
                category: data.category,
                priority: data.priority,
                query: data.query,
                date_filter: data.dateFilter,
                offset: data.offset,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Project
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PostCreateProjectResponse Successful Response
     * @throws ApiError
     */
    public static createProjectApiV1DashboardCreatePost(data: CreateProjectApiV1DashboardCreatePostData): CancelablePromise<CreateProjectApiV1DashboardCreatePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/dashboard/create',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Modify Project
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PutModifyProjectResponse Successful Response
     * @throws ApiError
     */
    public static modifyProjectApiV1DashboardModifyPut(data: ModifyProjectApiV1DashboardModifyPutData): CancelablePromise<ModifyProjectApiV1DashboardModifyPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/api/v1/dashboard/modify',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Project
     * @param data The data for the request.
     * @param data.uId
     * @returns DeleteDashboardResponse Successful Response
     * @throws ApiError
     */
    public static deleteProjectApiV1DashboardDeleteDelete(data: DeleteProjectApiV1DashboardDeleteDeleteData): CancelablePromise<DeleteProjectApiV1DashboardDeleteDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/dashboard/delete',
            query: {
                u_id: data.uId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Upload File
     * @param data The data for the request.
     * @param data.formData
     * @returns PostDashboardUploadFileResponse Successful Response
     * @throws ApiError
     */
    public static uploadFileApiV1DashboardUploadFilePost(data: UploadFileApiV1DashboardUploadFilePostData): CancelablePromise<UploadFileApiV1DashboardUploadFilePostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/dashboard/upload_file',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Download File
     * @param data The data for the request.
     * @param data.uId
     * @returns binary Successful Response
     * @throws ApiError
     */
    public static downloadFileApiV1DashboardDownloadFileGet(data: DownloadFileApiV1DashboardDownloadFileGetData): CancelablePromise<DownloadFileApiV1DashboardDownloadFileGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/dashboard/download_file',
            query: {
                u_id: data.uId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete File
     * @param data The data for the request.
     * @param data.uId
     * @returns DeleteDashboardResponse Successful Response
     * @throws ApiError
     */
    public static deleteFileApiV1DashboardDeleteFileDelete(data: DeleteFileApiV1DashboardDeleteFileDeleteData): CancelablePromise<DeleteFileApiV1DashboardDeleteFileDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/dashboard/delete_file',
            query: {
                u_id: data.uId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}